<?php
/**
 * @file
 * Base file for the twiggy module.
 *
 * @link     https://twig.symfony.com/doc/1.x/
 * @link     https://www.drupal.org/docs/8/theming/twig/twig-template-naming-conventions
 *
 * @todo     Implement d8 filters:
 *           https://www.drupal.org/docs/8/theming/twig/filters-modifying-variables-in-twig-templates
 *
 * @defgroup twiggy Twiggy
 * @{
 */

use AKlump\LoftLib\Code\Strings;
use Drupal\twiggy\Markup;
use Drupal\twiggy\MarkupInterface;


// TODO These are not included and we need a dependency on this.

/**
 * Render the output of a theme function using a twig template.
 *
 * @param array $vars
 *
 * @return string
 */
function twiggy(array $vars) {
  try {
    $registry = theme_get_registry(TRUE);
    $twiggy = $registry[$vars['theme_hook_original']]['twiggy'];
    $output = '';
    $defaults = _twiggy_defaults();
    $twig_settings = array_combine(array_map(function ($key) {
      return substr($key, 7);
    }, array_keys($defaults)), $defaults);

    _twiggy_autoload();
    $loader = new Twig_Loader_Filesystem($twiggy['template_dir']);
    $twig = new Twig_Environment($loader, $twig_settings);
    _twiggy_drupalize_twig($twig);

    //    // Leverage d8now and ensure we have $attributes
    //    // TODO Pull this into self to remove dependency?
    //    global $_d8now_attributes_class;
    //    if ($_d8now_attributes_class && (!isset($vars['attributes']) || !$vars['attributes'] instanceof $_d8now_attributes_class)) {
    //      $g = data_api();
    //
    //      // Gotcha! We ignore $vars['attributes'] and $vars['classes'] as determined by template_process, instead using their array source keys, so if you are tweaking anything post template_process, you must alter these arrays and not just the flat versions found in keys: 'classes', and 'attributes'.
    //      $g->ensure($vars, 'attributes_array', []);
    //      $g->ensure($vars, 'attributes_array.class', []);
    //      $g->ensure($vars, 'classes_array', []);
    //
    //      $import = $vars['attributes_array'];
    //      $import['class'] += $vars['classes_array'];
    //
    //      $vars['attributes'] = new $_d8now_attributes_class($import);
    //    }

    $output = $twig->render($twiggy['template_file'], $vars);

  }
  catch (\Exception $exception) {
    watchdog_exception('twiggy', $exception);
    if ($defaults['twiggy_debug']) {
      throw new Twig_Error_Runtime(
        $exception->getMessage(),
        $exception->getTemplateLine(),
        $exception->getSourceContext(),
        $exception
      );
    }
  }

  return $output;
}


/**
 * Implements hook_boot().
 */
function twiggy_boot() {
  _twiggy_autoload();
}

/**
 * Require once the autoload file, which gives us Twig.
 */
function _twiggy_autoload() {
  static $loaded = FALSE;
  if (!$loaded) {
    $loaded = TRUE;
    $autoloader = variable_get('twiggy_vender_autoload', dirname(__FILE__) . '/vendor/autoload.php');
    if (!file_exists($autoloader)) {

      $message = t("Missing autoloader: !autoloader.", ['!autoloader' => $autoloader]);

      // The developer has not specified that we should load from the drupal composer file.
      if (!variable_get('twiggy_vender_autoload')) {
        $message .= t(" Do you need to run `composer install` in the twiggy module directory?");
      }

      watchdog('twiggy', $message, WATCHDOG_CRITICAL);
      throw new \RuntimeException($message);
    }
    require_once $autoloader;

    // This handles the autoloading of our classes.
    require_once dirname(__FILE__) . '/vendor/autoload.php';
  }
}

/**
 * Adds Drupal-only functions, filters, etc., to the Twig instance.
 *
 * @param $twig
 */
function _twiggy_drupalize_twig($twig) {

  // Filters.
  $twig->addFilter(new \Twig_SimpleFilter('trans', 't', array('is_safe' => array('html'))));

  // Functions.
  $twig->addFunction(new \Twig_SimpleFunction('url', 'url'));

  $twig->addFilter(new \Twig_SimpleFilter('drupal_escape', 'twiggy_escape_filter', array(
    'needs_environment' => TRUE,
    'is_safe_callback' => 'twig_escape_filter_is_safe',
  )));
  $twig->addExtension(new \Twig_Extension_Escaper('drupal_escape'));

  // Replace the core escaper with our own.
  $twig->getExtension('Twig_Extension_Core')->setEscaper('drupal_escape', 'twiggy_escape_filter');

  // Allow modules to add functions, filters, etc.
  drupal_alter('twiggy_twig', $twig);
}

/**
 * Overrides twig_escape_filter().
 *
 * Replacement function for Twig's escape filter.
 *
 * Note: This function should be kept in sync with
 * theme_render_and_autoescape().
 *
 * @param \Twig_Environment $env
 *   A Twig_Environment instance.
 * @param mixed             $arg
 *   The value to be escaped.
 * @param string            $strategy
 *   The escaping strategy. Defaults to 'html'.
 * @param string            $charset
 *   The charset.
 * @param bool              $autoescape
 *   Whether the function is called by the auto-escaping feature (TRUE) or by
 *   the developer (FALSE).
 *
 * @return string|null
 *   The escaped, rendered output, or NULL if there is no valid output.
 *
 * @throws \Exception
 *   When $arg is passed as an object which does not implement __toString(),
 *   RenderableInterface or toString().
 *
 * @todo Refactor this to keep it in sync with theme_render_and_autoescape()
 *   in https://www.drupal.org/node/2575065
 */
function twiggy_escape_filter(\Twig_Environment $env, $arg, $charset = NULL) {

  // Check for a numeric zero int or float.
  if ($arg === 0 || $arg === 0.0) {
    return 0;
  }

  // Return early for NULL and empty arrays.
  if ($arg == NULL) {
    return NULL;
  }

  //  $this->bubbleArgMetadata($arg);

  // Keep Twig_Markup objects intact to support autoescaping.
  if (($arg instanceof \Twig_Markup || $arg instanceof MarkupInterface || _twiggy_is_attributes_string($arg))) {
    return $arg;
  }

  $return = NULL;

  if (is_scalar($arg)) {
    $return = (string) $arg;
  }
  else if (is_object($arg)) {
    if ($arg instanceof RenderableInterface) {
      $arg = $arg->toRenderable();
    }
    else if (method_exists($arg, '__toString')) {
      $return = (string) $arg;
    }
    // You can't throw exceptions in the magic PHP __toString() methods, see
    // http://php.net/manual/language.oop5.magic.php#object.tostring so
    // we also support a toString method.
    else if (method_exists($arg, 'toString')) {
      $return = $arg->toString();
    }
    else {
      throw new \Exception('Object of type ' . get_class($arg) . ' cannot be printed.');
    }
  }

  // We have a string or an object converted to a string: Autoescape it!
  if (isset($return)) {
    if ($return instanceof MarkupInterface) {
      return $return;
    }
    $autoescape = FALSE;

    return twig_escape_filter($env, $return, 'html', $charset, $autoescape);
  }

  // This is a normal render array, which is safe by definition, with
  // special simple cases already handled.

  // Early return if this element was pre-rendered (no need to re-render).
  if (isset($arg['#printed']) && $arg['#printed'] == TRUE && isset($arg['#markup']) && strlen($arg['#markup']) > 0) {
    return $arg['#markup'];
  }
  $arg['#printed'] = FALSE;

  return render($arg);
}

/**
 * Analyze $arg to see if it's the string value of an attribute, and thus safe to output.
 *
 * @param $arg , e.g.,  class="contextual-links-region card layout-item"
 *
 * @return bool
 */
function _twiggy_is_attributes_string(&$arg) {

  // We can play with the fact that attributes strings start always with a space.
  if (!is_string($arg) || $arg[0] !== ' ') {
    return FALSE;
  }
  if (preg_match_all('/(?:[a-z\-\_]+)=".*?"/', $arg, $matches)) {
    $safe = ' ' . implode(' ', $matches[0]);
    if (strlen($safe) === strlen($arg)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Return the default settings values.
 *
 * @return array
 */
function _twiggy_defaults() {
  return [
    'twiggy_debug' => variable_get('twiggy_debug', FALSE),
    'twiggy_strict_variables' => variable_get('twiggy_strict_variables', TRUE),
    'twiggy_charset' => variable_get('twiggy_charset', 'utf8'),
    'twiggy_autoescape' => variable_get('twiggy_autoescape', 'drupal_escape'),
  ];
}

/**
 * Return an array of directories (relative to DRUPAL_ROOT) to search for templates based on a module
 *
 * @return array
 * @throws \RuntimeException If there are no template directories.
 */
function _twiggy_template_dirs(array $twiggy) {
  global $theme;

  $templates = [];

  // These should be listed theme to module order.
  $templates[] = drupal_get_path('theme', $theme) . '/templates';
  $templates[] = drupal_get_path('module', $twiggy['module']) . '/templates';

  $dirs = array_filter($templates, function ($path) {
    return is_dir($path);
  });

  if (count($dirs) === 0) {
    throw new \RuntimeException("No template directories found.");
  }

  return $dirs;
}

/**
 * Implements hook_menu().
 */
function twiggy_menu() {
  $items['admin/config/content/twiggy'] = array(
    'title' => 'Twiggy Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twiggy_settings'),
    'access arguments' => array('twiggy:administer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'twiggy.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function twiggy_permission() {
  return array(
    'twiggy:administer' => array(
      'title' => t('Administer my module'),
      'description' => t('Configure Twiggy module settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Use this function in your hook_theme to convert your theme definition to use Twiggy.
 *
 * @param array  $themes     An array of theme hooks, as returned from hook_theme in your module.
 * @param string $hook       The name of the new theme hook being defined.
 * @param array  $definition The array that defines the theme hook as described by hook_theme
 *
 * @return array
 *
 * @see hook_theme
 */
function _twiggy_add_theme_hook(array &$themes, $hook, $function) {
  $defaults = _twiggy_defaults();
  $definition = $themes[$hook];

  // This comes in from hook_theme_registry_alter.
  if (preg_match('/theme_registry_alter$/', $function)) {
    if (!isset($themes[$hook])) {
      if ($defaults['twiggy_debug']) {
        drupal_set_message(t("Trying to use Twig for a hook that does not exist: %hook", ['%hook' => $hook]), 'error', FALSE);
      }

      return;
    }
    $definition = _twiggy_alter_theme_hook($themes[$hook]);
  }

  $definition['function'] = 'twiggy';
  $twiggy = [];

  // Detect the module defining the theme.
  $twiggy['module'] = preg_replace('/_theme_registry_alter|_theme$/i', '', $function);

  // Detect the template file to use.
  $dirs = _twiggy_template_dirs($twiggy);
  if (!(list($pattern, $template) = _twiggy_find_template($dirs, $hook, $definition)) && $defaults['twiggy_debug']) {
    drupal_set_message(t("Cannot find Twig file for %hook", ['%hook' => $hook]), 'error', FALSE);
  }
  $twiggy['template_dir'] = dirname($template);
  $twiggy['template_file'] = basename($template);
  $twiggy['base_hook'] = $hook;
  $definition['twiggy'] = $twiggy;

  $hook = str_replace('-', '_', preg_replace('/\.html\.twig$/', '', basename($template)));

  // Add processors to make sure we have Attributes
  global $_d8now_attributes_class;
  if (!empty($_d8now_attributes_class)) {
    array_unshift($definition['preprocess functions'], '_twiggy_process');
    $definition['process functions'][] = 'twiggy_process';
  }

  $themes[$hook] = $definition;
}

function _twiggy_process(&$vars, $hook) {
  global $_d8now_attributes_class;
  if (empty($vars['attributes'])) {
    $vars['attributes'] = [];
  }
  if (is_array($vars['attributes'])) {
    $vars['attributes'] = new $_d8now_attributes_class($vars['attributes']);
  }

  // Convert all variables to lower-camel-cased keys
  twiggy_camel_case_vars($vars);
}

/**
 * Convert all variable keys to lower camel case.
 *
 * @param $vars
 */
function twiggy_camel_case_vars(&$vars) {
  foreach ($vars as $key => $value) {
    if ($key !== ($cc_key = Strings::lowerCamel($key)) && !isset($vars[$cc_key])) {
      $vars[$cc_key] = $value;
      //      unset($vars[$key]);
    }
  }
}

function twiggy_theme_registry_alter(&$theme_registry) {
  // Determine which, if any hooks use twiggy.
  $hooks = array_map(function ($item) {
    return $item['twiggy'];
  }, array_filter($theme_registry, function ($item) {
    return isset($item['twiggy']);
  }));

  foreach ($hooks as $hook => $function) {
    _twiggy_add_theme_hook($theme_registry, $hook, $function);
  }
}

function _twiggy_alter_theme_hook($hook) {
  // https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_theme/7.x
  unset($hook['template']);
  //  if (isset($hook['render element'])) {
  //    array_unshift($hook['preprocess functions'], '_twiggy_restore_render_element');
  //  }

  //  unset($hook['theme path']);

  return $hook;
}

function _twiggy_restore_render_element($a, $b) {
  return;
}

/**
 * Find the template file to use for a given hook, pull_quote looks for pull-quote.html.twig
 *
 * @param $dirs
 * @param $hook
 *
 * @return bool|string
 */
function _twiggy_find_template(array $dirs, $hook, array $definition) {
  $g = data_api();


  // TODO Clean up
  $pattern = $g->get($definition, 'pattern', $hook);
  $pattern = $hook;
  $pattern = str_replace('_', '-', $pattern);

  $template_file = NULL;
  foreach ($dirs as $dir) {
    $mask = '/' . preg_quote($pattern) . '.*\.html\.twig/';
    $files = file_scan_directory($dir, $mask, ['recurse' => FALSE]);
    if ($files) {
      $template_file = key($files);
      break;
    }
  }

  return [$pattern, $template_file];
}

/**
 * Implements hook_filter_info().
 */
function twiggy_filter_info() {
  $filters['twiggy_markup'] = array(
    'title' => t('Markup object'),
    'description' => t('Wraps output in an instance of <code>\Drupal\twiggy\Markdown</code> for unescaped output in Twig templates.'),
    'default settings' => [],
    'tips callback' => '_twiggy_markup_tips',
    'process callback' => '_twiggy_markup',
  );

  return $filters;
}

/**
 * Implements hook_filter_FILTER_tips().
 */
function _twiggy_markup_tips($filter, $format, $long = FALSE) {
  $tips = array();
  $tips['twiggy_markup'] = array(
    t('Markup object'),
    t('Wraps output in an instance of <code>\Drupal\twiggy\Markdown</code> for unescaped output in Twig templates.'),
  );

  return $long ? $tips[$filter->name][1] : $tips[$filter->name][0];
}

/**
 * Filter processing function (wraps TwiggyMarkupFilter)
 *
 * @param $text
 * @param $filter
 *
 * @return mixed
 */
function _twiggy_markup($text, $filter) {
  return Markup::create($text);
}

/**
 * Implements hook_block_view_alter().
 */
function twiggy_block_view_alter(&$data, $block) {
  if (isset($data['content']) && $data['content'] instanceof Markup) {
    $data['content'] = $data['content']->asRenderArray();
  }
}


